# Terraform Provider release workflow.
name: Release
env:
  JFROG_SERVER: ${{ secrets.JFROG_SERVER }}
  JFROG_CLI_BUILD_NAME: ${{ github.event.repository.name }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_PUBLIC_REPOS }}
# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  workflow_dispatch:
  workflow_call: 

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions: {}

jobs:
  unit_test:
    name: Unit Testing
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Run unit tests
        run: |
          export TF_ACC=1
          go mod tidy
          go test ./... -cover -coverprofile=coverage.out -v
          go tool cover -func="coverage.out"
        working-directory: providers
      
      - name: Save unit tests coverage
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage
          path: providers/coverage.out
          
  sonarqube:
    name: Sonarqube Analysis
  # Sonar scan is not required for dependabot PRs
    runs-on: ubuntu-latest
    needs: unit_test
    permissions:
      contents: read
    if: ${{ github.event_name == 'pull_request' && !startsWith(github.head_ref, 'dependabot/') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
        
      - name: Download coverage
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: coverage

      - name: SonarQube Scan on PR
        if: ${{ github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' }} 
        uses: sonarsource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602 # v6.0.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ github.event.repository.name }}
            -Dsonar.pullrequest.key=${{ github.event.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.go.coverage.reportPaths=coverage.out
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL}}
          
      - name: SonarQube Scan on branch
        if: ${{ github.actor != 'dependabot[bot]' && github.event_name != 'pull_request' }} 
        uses: sonarsource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602 # v6.0.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ github.event.repository.name }}
            -Dsonar.go.coverage.reportPaths=coverage.out
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL}}

      - name: SonarQube Quality Gate check
        if: ${{ github.actor != 'dependabot[bot]' && inputs.quality_gate_check }} 
        uses: sonarsource/sonarqube-quality-gate-action@cf038b0e0cdecfa9e56c198bbb7d21d751d62c3b # v1.2.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}

  goreleaser:
    name: Release Provider
    runs-on: ubuntu-latest
    # include sonarqube as soon as sonar is enabled
    needs: [unit_test, sonarqube]
    permissions:
      contents: write
      id-token: write
    if: ${{ github.event_name == 'pull_request' && !startsWith(github.head_ref, 'dependabot/') }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      
      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Get next version increment
        id: increment
        run: |
          shopt -s nocasematch
          commit_message=$(git log --format=%B -n 1)
          if [[ $commit_message == "feat!:"* ]]; then
            echo "INCREMENT=major" >> "$GITHUB_OUTPUT"
          elif [[ $commit_message == "feat:"* ]]; then
            echo "INCREMENT=minor" >> "$GITHUB_OUTPUT"
          elif [[ $commit_message == "fix:"* ]]; then
            echo "INCREMENT=patch" >> "$GITHUB_OUTPUT"
          fi
      
      - name: Get next version numbers
        uses: reecetech/version-increment@a29aa752dc3b8118a2dc2ed93faf0e95a73a9c7e # 2024.10.1
        id: version_number
        with:
          increment: ${{ steps.increment.outputs.increment }}

      - name: Get full version name and version numbers
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            echo "full_version="$(git tag --sort "-committerdate" | cut -d$'\n' -f1)"" >> "$GITHUB_OUTPUT"
          else
            version=$(echo ${{ steps.version_number.outputs.version  }} | sed -e 's/-pre.*//g')
            echo "full_version="${version}.${{ github.run_number }}"" >> "$GITHUB_OUTPUT"
          fi

      - name: Jfrog setup
        uses: jfrog/setup-jfrog-cli@e5d3afdd1d75e4aa14a4f217cca93a2a9b5b846d # v4.8.0
        env:
          JF_URL: ${{ secrets.JF_URL }}
        with:
          oidc-provider-name: ${{ secrets.OIDC_PROVIDER_NAME }}

      - name: Configure JFrog CLI build number
        run: |
          echo "JFROG_CLI_BUILD_NUMBER=${{ steps.version.outputs.full_version }}" >> $GITHUB_ENV 

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      # Release the tag into Github. If draft in .goreleaser.yml is on true, not going to auto-publish the build
      # It would work only is the is a tag pushed.
      - name: Run GoReleaser release
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        if: startsWith(github.ref, 'refs/tags/') 
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
      # Builds binaries artifacts.
      - name: Run GoReleaser build
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --snapshot --clean 
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          VERSION: ${{ steps.version.outputs.full_version }}
      
      - name: Preparing artifacts and Publish to Jfrog
        run: |
          mkdir -p beyondtrust/passwordsafe/terraform-provider-passwordsafe/${{ steps.version.outputs.full_version }}
          mv *.zip beyondtrust/passwordsafe/terraform-provider-passwordsafe/${{ steps.version.outputs.full_version }}
          jfrog rt u "beyondtrust/passwordsafe/terraform-provider-passwordsafe/${{ steps.version.outputs.full_version }}/*" ${{ env.JFROG_SERVER}}
        working-directory: dist
      
      - name: Publish Build Information
        run: |
          jfrog rt build-add-git
          jfrog rt build-collect-env
          jfrog rt build-publish ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }}

      - name: Scan Build
        run: jfrog rt build-scan ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }}